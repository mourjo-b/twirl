import assert from "assert";
import { insertUser } from "../../src/models/users.js";
import { shortenLink, expandLink } from "../../src/controllers/links.js";
import { pool } from "../../src/db/connection.js";

// create two users using DB
// for user1, shorten link1
// check count is zero for link 1
// for user1, expand link1
// check link1= count= 1//!
// for user2, ensure that expanding link1 gives error
// check user2 can shorten link1(original) and shortenedLinks are not equal
// check second shorten link has count zero//!
// for same user1, adding a new link2, allows me to create a new shortlink with count zero//!
//EXPAND short link1 and shortlink2 for user1

async function testLinkShortening() {
  let user1_ID = await insertUser("TestUser", "testPassword", "normal");
  let user2_ID = await insertUser("TestUser2", "testPassword2", "normal");

  let link1 = "https://otee.dev/2021/11/03/diwali-hack-week.html";
  let link2 = "https://github.com/oitee";

  //----------------------------------------------------------------
  // SHORTEN LINK1 BY USER1
  //----------------------------------------------------------------

  let shortLinkObject_1 = await shortenLink(user1_ID, link1);
  assert(shortLinkObject_1.status, "Status of short link 1 should be true");
  let shortLink1_byUser1 = shortLinkObject_1.shortLink;
  await validateAccessedCount(shortLink1_byUser1, 0, user1_ID);

  //----------------------------------------------------------------
  // EXPAND SHORT LINK1 BY USER1
  //----------------------------------------------------------------

  let longLinkObject_1 = await expandLink(shortLink1_byUser1);
  assert(
    longLinkObject_1.status,
    "Status of long version of short link 1 should be true"
  );
  let longLink1_byUser1 = longLinkObject_1.longLink;
  assert.equal(
    longLink1_byUser1,
    link1,
    "Original link 1 and long version of short link 1 should be true"
  );
  await validateAccessedCount(shortLink1_byUser1, 1, user1_ID);

  //----------------------------------------------------------------
  // EXPAND SHORT LINK1 BY USER2
  //----------------------------------------------------------------

  let longLinkObject_1_user_2 = await expandLink(shortLink1_byUser1);
  assert.equal(
    longLinkObject_1_user_2.status,
    true,
    "Status of long version of link 1 generated by user 1 should be false, if requested by user2"
  );
  assert.equal(
    longLinkObject_1_user_2.longLink,
    longLink1_byUser1,
    "Expansion can be done by any user"
  );
  
  //----------------------------------------------------------------
  // SHORTEN LINK1 BY USER2
  //----------------------------------------------------------------
  shortLinkObject_1 = await shortenLink(user2_ID, link1);
  assert(
    shortLinkObject_1.status,
    "Status of short link 1 generated by user 2 should be true"
  );
  let shortLink1_byUser2 = shortLinkObject_1.shortLink;

  //----------------------------------------------------------------
  // EXPAND SHORT LINK1 BY USER2
  //----------------------------------------------------------------
  longLinkObject_1_user_2 = await expandLink(shortLink1_byUser2);
  assert.equal(
    longLinkObject_1_user_2.status,
    true,
    "Status of long version of link 1 generated by user 2 should be true, when requested by user2"
  );
  let longLink1_byUser2 = longLinkObject_1_user_2.longLink;
  await validateAccessedCount(shortLink1_byUser2, 1, user2_ID);

  //----------------------------------------------------------------
  // COMPARE SHORT LINK1 GENERATED BY USERS 1 & 2
  //----------------------------------------------------------------
  assert.equal(
    longLink1_byUser1,
    longLink1_byUser2,
    "Long links for the same original link, should be same for users 1 and 2"
  );

  //----------------------------------------------------------------
  // SHORTEN LINK2 BY USER1
  //----------------------------------------------------------------
  let shortLinkObject_2 = await shortenLink(user1_ID, link2);
  assert(shortLinkObject_2.status, "Status of short link2 should be true");
  let shortLink2 = shortLinkObject_2.shortLink;

  //----------------------------------------------------------------
  // EXPAND SHORT LINK2 BY USER1
  //----------------------------------------------------------------

  let longLinkObject_2 = await expandLink(shortLink2);
  assert(
    longLinkObject_2.status,
    "Status of long version of short link 2 should be true"
  );
  let longLink2 = longLinkObject_2.longLink;
  assert.equal(
    longLink2,
    link2,
    "Original link 2 and long version of short link 2 should be true"
  );
  await validateAccessedCount(shortLink2, 1, user1_ID);
}

beforeAll(async () => {
  await pool.query(`
  DROP TABLE IF EXISTS counters;
  DROP TABLE IF EXISTS links;
  DROP TABLE IF EXISTS users;
  DROP TABLE IF EXISTS roles;
  CREATE TABLE roles (
    id SERIAL PRIMARY KEY,
    name TEXT);
  CREATE TABLE users (
    id UUID PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE,
    role_id INTEGER REFERENCES roles (id));
  INSERT INTO roles (name) values ('admin') , ('normal'), ('superAdmin');
  CREATE TABLE counters(
    id TEXT PRIMARY KEY,
    value INTEGER  
);
  INSERT INTO counters (id, value) values ('link_counter', 0);
  UPDATE counters SET value=value+1 WHERE id='link_counter' RETURNING value;

  CREATE TABLE links (
    user_id UUID REFERENCES users (id),
    original_link TEXT NOT NULL,
    short_link TEXT NOT NULL,
    enabled BOOLEAN NOT NULL DEFAULT 'true',
    accessed_count INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE,
    updated_at TIMESTAMP WITH TIME ZONE,
    PRIMARY KEY (user_id, original_link)
);`);
});
afterAll(async () => {
  await pool.end();
});

await test("Test shortening and expansion of links", testLinkShortening);

async function validateAccessedCount(shortLink, expectedCount, userID) {
  let res = await pool.query(
    "SELECT accessed_count FROM links where short_link=$1 AND user_id=$2",
    [shortLink, userID]
  );

  assert.equal(
    res.rows[0]["accessed_count"],
    expectedCount,
    `The accessed count for ${shortLink}, should be ${expectedCount}`
  );
}
